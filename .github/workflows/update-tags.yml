name: 'Update Tags'
run-name: 'Build #${{ github.run_number }} - PR: ${{ github.event.pull_request.title }}'

on:
  pull_request:
    types: [closed]

permissions:
  id-token: write
  contents: read
  pull-requests: read

jobs:
  GetChangedElements:
    name: 'Get Changed Elements'
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true
    outputs:
      elementsToBuild: ${{ steps.elements-to-run-ci.outputs.elementsToBuild }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Create changed files src file
      id: create-changed-files-src-file
      shell: pwsh
      run: |
        $elements = (Get-Content changed-files-config.json | ConvertFrom-Json).elements
        New-Item changed-files-config.yaml
        foreach ($element in $elements) {
          Add-Content -Path .\changed-files-config.yaml -Value "$($element.name):"
          foreach ($path in $element.path) {
            Add-Content -Path .\changed-files-config.yaml -Value "- $path"
          }
        }
        $elementsCompressed = $elements | ConvertTo-Json -Compress
        Write-Host "pwsh = $($elements.name)"
        Write-Host "json = $elementsCompressed"
        "elements=$elementsCompressed" >> $env:GITHUB_OUTPUT
        
    - name: Evaluate Changed Files
      uses: tj-actions/changed-files@v44
      id: changed-files
      with:
        dir_names: true
        files_yaml_from_source_file: changed-files-config.yaml

    - name: Output elements to run CI for
      id: elements-to-run-ci
      shell: pwsh
      run: |
        $elements = ('${{ steps.create-changed-files-src-file.outputs.elements }}' | ConvertFrom-Json)
        Write-Host "all elements from config = $($elements.name)"
        $allOutputs = ('${{ toJson(steps.changed-files.outputs) }}' | ConvertFrom-Json)
        $elementsToBuild = @()
        foreach ($element in $elements) {
          Write-Host "$($element.name) changed:" $allOutputs."$($element.name)_any_changed"
          if ($allOutputs."$($element.name)_any_changed" -eq "true") {
            $elementsToBuild += $element
          }
        }
        if ($elementsToBuild.Count -eq 1) {
          $elementsToBuildJson = "[$($elementsToBuild | ConvertTo-Json -Compress)]"
        }
        else {
          $elementsToBuildJson = $elementsToBuild | ConvertTo-Json -Compress
        }
        Write-Host "pwsh = $($elementsToBuild.name)"
        Write-Host "json = $elementsToBuildJson"
        "elementsToBuild=$elementsToBuildJson" >> $env:GITHUB_OUTPUT
        

  TestGitVersion:
    name: 'Test Git Version - ${{ matrix.element.name }}'
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true
    needs: GetChangedElements
    strategy:
      fail-fast: false
      max-parallel: 5
      matrix:
        element: ${{fromJson(needs.GetChangedElements.outputs.elementsToBuild)}}
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: 'Install GitVersion'
      uses: gittools/actions/gitversion/setup@v0
      with:
        versionSpec: '5.x'
        includePrerelease: 'false'
        preferLatestVersion: 'true'

    - name: GitVersion
      id: gitversion
      uses: gittools/actions/gitversion/execute@v0
      with:
        useConfigFile: 'true'
        additionalArguments: '-b ${{ github.event.pull_request.head.ref }} /overrideconfig tag-prefix=${{ matrix.element.name }}-v'

    - name: Output element
      id: output-element
      shell: pwsh
      run: |
        Write-Host "element=${{ matrix.element.name }}"
        Write-Host "element path=${{ toJson(matrix.element.path) }}"
        Write-Host "new version=${{ steps.gitversion.outputs.majorMinorPatch }}"

    - name: Create Git Tag
      uses: actions/github-script@v4
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const tag = '${{ matrix.element.name }}-v${{ steps.gitversion.outputs.majorMinorPatch }}';
          const ref = process.env.GITHUB_REF;
          const sha = process.env.GITHUB_SHA;
          const octokit = github.getOctokit(process.env.GITHUB_TOKEN);
          octokit.git.createRef({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: `refs/tags/${tag}`,
            sha: sha
          });
          console.log(`Created tag ${tag} for ref ${ref}`);